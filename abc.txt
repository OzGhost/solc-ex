pragma solidity ^0.4.17;

contract ExaminationRequest {
    address public patientAddress;
    string examName;
    string public examResult;
    int cost;
    bool public completed;
    
    constructor(string name, int costParam, address patientAddressParam) public {
        examName = name;
        cost = costParam;
        patientAddress = patientAddressParam;
        completed = false;
    }
    
    function updateResult(string result) public {
        examResult = result;
    }
    
    function updateStatus(bool completed) public {
        completed = completed;
    }
}


contract Patient {
    address[] public examinations;
    string public patientName;
    
    constructor(string name) public {
        patientName = name;
    }
    
}


contract Hospital{
    event PatientCreated(address patienAddress);
    event ExamCreated(address exam);
    event ExamUpdated(address exam);
    
    address[] public examinations;
    address[] public patients;
    address lastestPatient;
	string hospitalName;
	constructor (string name) public {
	    hospitalName = name;
	}
    
    function createNewPatient(string name) public {
        lastestPatient = new Patient(name);
        patients.push(lastestPatient);
        emit PatientCreated(lastestPatient);
    }
    
    function createNewExamination(string name, int cost,  address patientAddress) public {
        ExaminationRequest newExam = new ExaminationRequest(name, cost, patientAddress);
        examinations.push(newExam);
        emit ExamCreated(newExam);
    }
    
    function getPatients() public view returns(address[]){
        return patients;
    }
    
    function updateExaminationResult(address examinationRequestAddress, string result) public {
        ExaminationRequest newExam = ExaminationRequest(examinationRequestAddress);
        newExam.updateStatus(true);
        newExam.updateResult(result);
        emit ExamUpdated(examinationRequestAddress);
    }
}


